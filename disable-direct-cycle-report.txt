diff --git a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/AnalyzerImpl.kt b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/AnalyzerImpl.kt
index 1d75f82..0ed6012 100644
--- a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/AnalyzerImpl.kt
+++ b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/AnalyzerImpl.kt
@@ -8,9 +8,11 @@ import com.seanshubin.code.structure.relationparser.RelationDetail
 
 class AnalyzerImpl(
     private val timer: Timer,
-    private val cycleLoopEvent: (String, Int, Int) -> Unit
+    private val cycleLoopEvent: (String, Int, Int) -> Unit,
+    private val reportType: ReportType
 ) : Analyzer {
     override fun analyze(observations: Observations): Analysis {
+        val includeCycles = reportType.shouldDisplayDirectCycles
         val rawNames = observations.binaries.map { it.name }
         val rawIds = rawNames.map { it.toCodeUnit().parts }
         val commonPrefix = ListUtil.commonPrefix(rawIds)
@@ -25,7 +27,7 @@ class AnalyzerImpl(
             }.sortedWith(pairComparator).distinct()
         }
         val cycleLoop = cycleLoopFunction("analysis.global.cycle")
-        val global = timer.monitor("analysis.global") { analyze(names, references, cycleLoop) }
+        val global = timer.monitor("analysis.global") { analyze(names, references, cycleLoop, includeCycles) }
         val ancestorToDescendant = timer.monitor("analysis.ancestorToDescendant") {
             references.filter {
                 it.first.toCodeUnit().isAncestorOf(it.second.toCodeUnit())
@@ -42,7 +44,8 @@ class AnalyzerImpl(
             composeGroupScopedAnalysisList(
                 emptyList(),
                 NamesReferences(names, references),
-                CycleUtil.cycleLoopNop
+                CycleUtil.cycleLoopNop,
+                includeCycles
             )
         }
         val errors = timer.monitor("analysis.errors") { composeErrors(global, groupScopedAnalysisList, lineage) }
@@ -72,9 +75,9 @@ class AnalyzerImpl(
             ancestorToDescendant: List<Pair<String, String>>,
             descendantToAncestor: List<Pair<String, String>>
         ): Summary {
-            val inCycleCount = global.cycles.sumOf { it.size }
+            val inCycleCount = global.cycleInfo?.cycles?.sumOf { it.size } ?: 0
             val inGroupCycleCount = groupScopedAnalysisList.map { it.second }.sumOf { scopedAnalysis ->
-                scopedAnalysis.cycles.sumOf { cycles -> cycles.size }
+                scopedAnalysis.cycleInfo?.cycles?.sumOf { cycles -> cycles.size } ?: 0
             }
             val ancestorDependsOnDescendantCount = ancestorToDescendant.size
             val descendantDependsOnAncestorCount = descendantToAncestor.size
@@ -91,9 +94,9 @@ class AnalyzerImpl(
             groupScopedAnalysisList: List<Pair<List<String>, ScopedAnalysis>>,
             lineage: Lineage
         ): Errors {
-            val inDirectCycle = global.cycles.flatten().distinct().sorted()
+            val inDirectCycle = global.cycleInfo?.cycles?.flatten()?.distinct()?.sorted() ?: emptyList()
             val inGroupCycle = groupScopedAnalysisList.flatMap { (group, scopedAnalysis) ->
-                scopedAnalysis.cycles.flatten().map { CodeUnit(group).resolve(it).toName() }
+                scopedAnalysis.cycleInfo?.cycles?.flatten()?.map { CodeUnit(group).resolve(it).toName()  } ?: emptyList()
             }.distinct().sorted()
             val ancestorDependsOnDescendant = lineage.ancestorDependsOnDescendant
             val descendantDependsOnAncestor = lineage.descendantDependsOnAncestor
@@ -116,18 +119,23 @@ class AnalyzerImpl(
         private fun analyze(
             names: List<String>,
             references: List<Pair<String, String>>,
-            cycleLoop: (Int, Int) -> Unit
+            cycleLoop: (Int, Int) -> Unit,
+            includeCycles: Boolean
         ): ScopedAnalysis {
-            val cycles = findCycles(references, cycleLoop)
+            val cycleInfo = if (includeCycles) {
+                val cycles = findCycles(references, cycleLoop)
+                val cycleDetails = composeAllCycleDetails(cycles, references)
+                CycleInfo(cycles, cycleDetails)
+            } else {
+                null
+            }
             val entryPoints = findEntryPoints(names, references)
-            val cycleDetails = composeAllCycleDetails(cycles, references)
-            val details = composeDetails(names, references, cycles)
+            val details = composeDetails(names, references, cycleInfo?.cycles)
             return ScopedAnalysis(
-                cycles,
+                cycleInfo,
                 names,
                 references,
                 entryPoints,
-                cycleDetails,
                 details
             )
         }
@@ -174,7 +182,7 @@ class AnalyzerImpl(
         fun composeDetails(
             names: List<String>,
             references: List<Pair<String, String>>,
-            cycles: List<List<String>>
+            cycles: List<List<String>>?
         ): List<Detail> {
             val referencesByFirst = references.groupBy { it.first }
             val referencesBySecond = references.groupBy { it.second }
@@ -186,11 +194,11 @@ class AnalyzerImpl(
                 val referencesIn: List<String> = referencesBySecond[name]?.map { it.first } ?: emptyList()
                 referencesIn.toSet()
             }
-            val cyclesByName = cycles.flatMap { cycle ->
+            val cyclesByName = cycles?.flatMap { cycle ->
                 cycle.map { name ->
                     name to cycle.toSet()
                 }
-            }.toMap()
+            }?.toMap() ?: emptyMap()
             return names.map { name ->
                 composeDetail(name, referencesOutByName, referencesInByName, cyclesByName)
             }
@@ -234,6 +242,7 @@ class AnalyzerImpl(
             referencesByName: Map<String, Set<String>>,
             cyclesByName: Map<String, Set<String>>
         ): Set<String> {
+            println("name = $name, referencesByName = $referencesByName, cyclesByName = $cyclesByName")
             val thisOrCycle = cyclesByName[name] ?: setOf(name)
             val immediate = thisOrCycle.flatMap { partOfCycle ->
                 if (referencesByName.containsKey(partOfCycle)) {
@@ -254,16 +263,21 @@ class AnalyzerImpl(
         private fun composeGroupScopedAnalysisList(
             path: List<String>,
             namesReferences: NamesReferences,
-            cycleLoop: (Int, Int) -> Unit
+            cycleLoop: (Int, Int) -> Unit,
+            includeCycles:Boolean
         ): List<Pair<List<String>, ScopedAnalysis>> {
             if (namesReferences.names.isEmpty()) return emptyList()
             val top = namesReferences.head()
-            val topAnalysis = analyze(top.names, top.references, cycleLoop)
+            val topAnalysis = analyze(top.names, top.references, cycleLoop, includeCycles)
             val topEntry = path to topAnalysis
             val descendantMap = top.names.flatMap {
                 val childPath = path + it
                 val childNamesReferences = namesReferences.tail(it)
-                composeGroupScopedAnalysisList(childPath, childNamesReferences, cycleLoop)
+                composeGroupScopedAnalysisList(
+                    childPath,
+                    childNamesReferences,
+                    cycleLoop,
+                    includeCycles)
             }
             return listOf(topEntry) + descendantMap
         }
diff --git a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/ConfigHelp.kt b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/ConfigHelp.kt
deleted file mode 100644
index e01dfbc..0000000
--- a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/ConfigHelp.kt
+++ /dev/null
@@ -1,5 +0,0 @@
-package com.seanshubin.code.structure.domain
-
-interface ConfigHelp {
-    fun generateConfigHelp()
-}
diff --git a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/ConfigHelpImpl.kt b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/ConfigHelpImpl.kt
deleted file mode 100644
index 5dc4f6c..0000000
--- a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/ConfigHelpImpl.kt
+++ /dev/null
@@ -1,13 +0,0 @@
-package com.seanshubin.code.structure.domain
-import com.seanshubin.code.structure.config.Configuration
-import com.seanshubin.code.structure.relationparser.RelationParserRepository
-
-class ConfigHelpImpl(
-    private val config:Configuration,
-    private val relationParserRepository: RelationParserRepository
-    ):ConfigHelp {
-    override fun generateConfigHelp(){
-        val supportedBytecodeFormatNames = relationParserRepository.supportedBytecodeFormatNames()
-        config.load(listOf("help", "bytecodeFormat" ), supportedBytecodeFormatNames )
-    }
-}
\ No newline at end of file
diff --git a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/CycleInfo.kt b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/CycleInfo.kt
new file mode 100644
index 0000000..6bc0fde
--- /dev/null
+++ b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/CycleInfo.kt
@@ -0,0 +1,6 @@
+package com.seanshubin.code.structure.domain
+
+data class CycleInfo(
+    val cycles: List<List<String>>,
+    val cycleDetails: List<CycleDetail>
+)
diff --git a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/DirectCycleReport.kt b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/DirectCycleReport.kt
index d7dff9e..1695946 100644
--- a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/DirectCycleReport.kt
+++ b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/DirectCycleReport.kt
@@ -10,22 +10,38 @@ import java.nio.file.Path
 class DirectCycleReport : Report {
     override fun generate(reportDir: Path, validated: Validated): List<Command> {
         val parents = listOf(Page.tableOfContents)
-        val htmlInsideBody = generateHtml(validated.analysis.global)
-        val html = ReportHelper.wrapInTopLevelHtml(Page.directCycles.caption, htmlInsideBody, parents)
-        val path = reportDir.resolve(Page.directCycles.file)
-        val lines = html.toLines()
-        val topCommand = CreateFileCommand(path, lines)
-        val graphCommands = commandsForAllCycleGraphs(reportDir, validated.analysis.global, parents)
-        return listOf(topCommand) + graphCommands
+        val cycleInfo = validated.analysis.global.cycleInfo
+        if(cycleInfo == null){
+            val htmlInsideBody = generateNoCycleInformation()
+            val html = ReportHelper.wrapInTopLevelHtml(Page.directCycles.caption, htmlInsideBody, parents)
+            val path = reportDir.resolve(Page.directCycles.file)
+            val lines = html.toLines()
+            val topCommand = CreateFileCommand(path, lines)
+            val cycleDetails = validated.analysis.global.cycleInfo?.cycleDetails
+            val graphCommands = if(cycleDetails == null) {
+                emptyList()
+            } else {
+                commandsForAllCycleGraphs(reportDir, cycleDetails, parents)
+            }
+            return listOf(topCommand) + graphCommands
+        } else {
+            val htmlInsideBody = generateHtml(cycleInfo.cycles)
+            val html = ReportHelper.wrapInTopLevelHtml(Page.directCycles.caption, htmlInsideBody, parents)
+            val path = reportDir.resolve(Page.directCycles.file)
+            val lines = html.toLines()
+            val topCommand = CreateFileCommand(path, lines)
+            val cycleDetails = cycleInfo.cycleDetails
+            val graphCommands = commandsForAllCycleGraphs(reportDir, cycleDetails, parents)
+            return listOf(topCommand) + graphCommands
+        }
     }
-
     private fun commandsForAllCycleGraphs(
         reportDir: Path,
-        analysis: ScopedAnalysis,
+        cycleDetails: List<CycleDetail>,
         parents: List<Page>
     ): List<Command> {
         val parentsForCycle = parents + listOf(Page.directCycles)
-        return analysis.cycleDetails.flatMapIndexed { index, cycleDetail ->
+        return cycleDetails.flatMapIndexed { index, cycleDetail ->
             commandsForCycleGraph(reportDir, index, cycleDetail, parentsForCycle)
         }
     }
@@ -61,18 +77,24 @@ class DirectCycleReport : Report {
             bold = false
         )
 
-    private fun generateHtml(analysis: ScopedAnalysis): List<HtmlElement> {
-        return summaryElement(analysis) + cyclesElement(analysis)
+    private fun generateHtml(cycles: List<List<String>>): List<HtmlElement> {
+        return summaryElement(cycles) + cyclesElement(cycles)
+    }
+    private fun generateNoCycleInformation(): List<HtmlElement> {
+        val text = "If you need cycle information at this level, in your configuration, change reportType to ${ReportType.DETAILED.name.lowercase()}"
+        val textElement = HtmlElement.Text(text)
+        val paragraph = HtmlElement.Tag("p", textElement)
+        return listOf(paragraph)
     }
 
-    private fun summaryElement(analysis: ScopedAnalysis): List<HtmlElement> {
-        val countParagraph = HtmlElement.Tag("p", HtmlElement.Text("cycle count: ${analysis.cycles.size}"))
-        val fragmentAnchors = composeFragmentAnchors(analysis)
+    private fun summaryElement(cycles: List<List<String>>): List<HtmlElement> {
+        val countParagraph = HtmlElement.Tag("p", HtmlElement.Text("cycle count: ${cycles.size}"))
+        val fragmentAnchors = composeFragmentAnchors(cycles)
         return listOf(countParagraph) + fragmentAnchors
     }
 
-    private fun composeFragmentAnchors(analysis: ScopedAnalysis): List<HtmlElement> =
-        analysis.cycles.indices.map(::composeFragmentAnchor)
+    private fun composeFragmentAnchors(cycles: List<List<String>>): List<HtmlElement> =
+        cycles.indices.map(::composeFragmentAnchor)
 
     private fun composeFragmentAnchor(index: Int): HtmlElement {
         val title = cycleName(index)
@@ -80,8 +102,8 @@ class DirectCycleReport : Report {
         return anchor(title, link)
     }
 
-    private fun cyclesElement(analysis: ScopedAnalysis): List<HtmlElement> {
-        return analysis.cycles.flatMapIndexed(::cycleListElement)
+    private fun cyclesElement(cycles: List<List<String>>): List<HtmlElement> {
+        return cycles.flatMapIndexed(::cycleListElement)
     }
 
     private fun cycleListElement(listIndex: Int, cycleList: List<String>): List<HtmlElement> {
diff --git a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/EnumUtil.kt b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/EnumUtil.kt
new file mode 100644
index 0000000..debe7c7
--- /dev/null
+++ b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/EnumUtil.kt
@@ -0,0 +1,14 @@
+package com.seanshubin.code.structure.domain
+
+object EnumUtil {
+    inline fun <reified T:Enum<T>> defaultString() =
+        enumValues<T>().joinToString(", ", "choose one of: ") { it.name.lowercase() }
+    inline fun <reified T : Enum<T>> Any?.coerceToEnum(): T =
+            when (this) {
+                is String ->
+                    enumValues<T>().find { it.name == this.uppercase() }
+                        ?: throw RuntimeException("Unexpected ${T::class.simpleName} '$this', ${defaultString<T>()}")
+                is T -> this
+                else -> throw RuntimeException("Unexpected ${T::class.simpleName} '$this', ${defaultString<T>()}")
+            }
+}
diff --git a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/GraphReport.kt b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/GraphReport.kt
index 1c6a55e..c6e774a 100644
--- a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/GraphReport.kt
+++ b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/GraphReport.kt
@@ -18,7 +18,7 @@ class GraphReport(private val nodeLimitMainGraph: Int) : Report {
                 Page.graph.id,
                 nodes,
                 analysis.global.references,
-                analysis.global.cycles,
+                analysis.global.cycleInfo?.cycles ?: emptyList(),
                 parents
             )
         }
diff --git a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/GroupCycleReport.kt b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/GroupCycleReport.kt
index 903ffd7..da35c78 100644
--- a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/GroupCycleReport.kt
+++ b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/GroupCycleReport.kt
@@ -22,9 +22,9 @@ class GroupCycleReport : Report {
 
     private fun groupCycleList(groupScopedAnalysisList: List<Pair<List<String>, ScopedAnalysis>>): List<GroupCycle> {
         return groupScopedAnalysisList.flatMap { (group, scopedAnalysis) ->
-            scopedAnalysis.cycleDetails.map {
+            scopedAnalysis.cycleInfo?.cycleDetails?.map {
                 GroupCycle(group, it.names, it.references)
-            }
+            } ?: emptyList()
         }
     }
 
diff --git a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/GroupReport.kt b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/GroupReport.kt
index 0b25c63..df1606b 100644
--- a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/GroupReport.kt
+++ b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/GroupReport.kt
@@ -29,7 +29,7 @@ class GroupReport : Report {
             baseName,
             nodes,
             groupAnalysis.references,
-            groupAnalysis.cycles,
+            groupAnalysis.cycleInfo?.cycles ?: emptyList(),
             parents
         )
     }
diff --git a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/RelationParserRepositoryImpl.kt b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/RelationParserRepositoryImpl.kt
index 8041d47..c0a523b 100644
--- a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/RelationParserRepositoryImpl.kt
+++ b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/RelationParserRepositoryImpl.kt
@@ -2,6 +2,7 @@ package com.seanshubin.code.structure.domain
 
 import com.seanshubin.code.structure.beamformat.BeamParser
 import com.seanshubin.code.structure.jvmformat.ClassParser
+import com.seanshubin.code.structure.relationparser.BytecodeFormat
 import com.seanshubin.code.structure.relationparser.RelationParser
 import com.seanshubin.code.structure.relationparser.RelationParserRepository
 
@@ -10,15 +11,10 @@ class RelationParserRepositoryImpl(
     beamParser: BeamParser
 ) : RelationParserRepository {
     private val parserByBytecodeFormat = mapOf(
-        "class" to classParser,
-        "beam" to beamParser
+        BytecodeFormat.CLASS to classParser,
+        BytecodeFormat.BEAM to beamParser
     )
 
-    override fun supportedBytecodeFormatNames(): List<String> =
-        parserByBytecodeFormat.keys.sorted()
-
-    override fun lookupByBytecodeFormat(bytecodeFormat: String): RelationParser {
-        return parserByBytecodeFormat[bytecodeFormat]
-            ?: throw RuntimeException("Unsupported bytecode format '$bytecodeFormat'")
-    }
+    override fun lookupByBytecodeFormat(bytecodeFormat: BytecodeFormat): RelationParser =
+        parserByBytecodeFormat.getValue(bytecodeFormat)
 }
diff --git a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/ReportType.kt b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/ReportType.kt
new file mode 100644
index 0000000..6836843
--- /dev/null
+++ b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/ReportType.kt
@@ -0,0 +1,6 @@
+package com.seanshubin.code.structure.domain
+
+enum class ReportType(val shouldDisplayDirectCycles:Boolean) {
+    FAST(shouldDisplayDirectCycles = false),
+    DETAILED(shouldDisplayDirectCycles = true)
+}
diff --git a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/Runner.kt b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/Runner.kt
index 3c2a134..41a1351 100644
--- a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/Runner.kt
+++ b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/Runner.kt
@@ -5,7 +5,6 @@ import java.time.Clock
 import java.time.Duration
 
 class Runner(
-    private val configHelp:ConfigHelp,
     private val clock: Clock,
     private val observer: Observer,
     private val analyzer: Analyzer,
@@ -22,7 +21,6 @@ class Runner(
     private val countAsErrors: CountAsErrors,
 ) : Runnable {
     override fun run() {
-        configHelp.generateConfigHelp()
         configFileEvent(configFile)
         val startTime = clock.instant()
         val observations = timer.monitor("observations") { observer.makeObservations() }
diff --git a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/ScopedAnalysis.kt b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/ScopedAnalysis.kt
index 2830d30..708df7c 100644
--- a/domain/src/main/kotlin/com/seanshubin/code/structure/domain/ScopedAnalysis.kt
+++ b/domain/src/main/kotlin/com/seanshubin/code/structure/domain/ScopedAnalysis.kt
@@ -1,11 +1,10 @@
 package com.seanshubin.code.structure.domain
 
 data class ScopedAnalysis(
-    val cycles: List<List<String>>,
+    val cycleInfo:CycleInfo?,
     val names: List<String>,
     val references: List<Pair<String, String>>,
     val entryPoints: List<String>,
-    val cycleDetails: List<CycleDetail>,
     val details: List<Detail>
 ) {
     private val detailByName = details.associateBy { it.name }
diff --git a/injection/src/main/kotlin/com/seanshubin/code/structure/injection/Dependencies.kt b/injection/src/main/kotlin/com/seanshubin/code/structure/injection/Dependencies.kt
index 9fa5750..5cee26e 100644
--- a/injection/src/main/kotlin/com/seanshubin/code/structure/injection/Dependencies.kt
+++ b/injection/src/main/kotlin/com/seanshubin/code/structure/injection/Dependencies.kt
@@ -12,6 +12,8 @@ import com.seanshubin.code.structure.config.TypeUtil.coerceToString
 import com.seanshubin.code.structure.contract.delegate.FilesContract
 import com.seanshubin.code.structure.contract.delegate.FilesDelegate
 import com.seanshubin.code.structure.domain.*
+import com.seanshubin.code.structure.domain.EnumUtil.coerceToEnum
+import com.seanshubin.code.structure.domain.EnumUtil.defaultString
 import com.seanshubin.code.structure.elixirsyntax.ElixirParser
 import com.seanshubin.code.structure.elixirsyntax.ElixirParserImpl
 import com.seanshubin.code.structure.exec.Exec
@@ -25,6 +27,7 @@ import com.seanshubin.code.structure.jvmformat.*
 import com.seanshubin.code.structure.kotlinsyntax.KotlinParser
 import com.seanshubin.code.structure.kotlinsyntax.KotlinParserImpl
 import com.seanshubin.code.structure.nameparser.NameParser
+import com.seanshubin.code.structure.relationparser.BytecodeFormat
 import com.seanshubin.code.structure.relationparser.RelationParser
 import com.seanshubin.code.structure.relationparser.RelationParserRepository
 import com.seanshubin.code.structure.scalasyntax.ScalaParser
@@ -35,7 +38,7 @@ import java.time.Clock
 import java.time.Duration
 
 class Dependencies(integrations: Integrations) {
-    private val configBaseName:String = integrations.configBaseName
+    private val configBaseName: String = integrations.configBaseName
     private val configFile = Paths.get("$configBaseName-config.json")
     private val configuredErrorsFile = Paths.get("$configBaseName-existing-errors.json")
     private val files: FilesContract = FilesDelegate
@@ -51,12 +54,12 @@ class Dependencies(integrations: Integrations) {
         descendantDependsOnAncestor =
         config.load(listOf("countAsErrors", "descendantDependsOnAncestor"), true).coerceToBoolean(),
     )
-    private val maximumAllowedErrorCount:Int = config.load(listOf("maximumAllowedErrorCount"), 0).coerceToInt()
+    private val maximumAllowedErrorCount: Int = config.load(listOf("maximumAllowedErrorCount"), 0).coerceToInt()
     private val inputDir = config.load(listOf("inputDir"), ".").coerceToPath()
     private val outputDir = config.load(listOf("outputDir"), "generated").coerceToPath()
     private val localDepth = config.load(listOf("localDepth"), 2).coerceToInt()
     private val useObservationsCache = config.load(listOf("useObservationsCache"), false).coerceToBoolean()
-    private val bytecodeFormat = config.load(listOf("bytecodeFormat"), "bytecode format").coerceToString()
+    private val bytecodeFormat = config.load(listOf("bytecodeFormat"), defaultString<BytecodeFormat>()).coerceToEnum<BytecodeFormat>()
     private val sourcePrefix = config.load(listOf("sourcePrefix"), "prefix for link to source code").coerceToString()
     private val sourceFileIncludeRegexPatterns: List<String> =
         config.load(listOf("sourceFileRegexPatterns", "include"), emptyList<String>()).coerceToListOfString()
@@ -77,6 +80,7 @@ class Dependencies(integrations: Integrations) {
         binaryFileIncludeRegexPatterns,
         binaryFileExcludeRegexPatterns
     )
+    private val reportType: ReportType = config.load(listOf("reportType"), defaultString<ReportType>()).coerceToEnum<ReportType>()
     private val fileFinder: FileFinder = FileFinderImpl(files)
     private val kotlinParser: KotlinParser = KotlinParserImpl(inputDir)
     private val elixirParser: ElixirParser = ElixirParserImpl(inputDir)
@@ -123,7 +127,7 @@ class Dependencies(integrations: Integrations) {
     private val notifications: Notifications = NotificationsImpl(emitLine)
     private val timeTakenEvent: (String, Duration) -> Unit = notifications::timeTakenEvent
     private val timer: Timer = EventTimer(timeTakenEvent, clock)
-    private val analyzer: Analyzer = AnalyzerImpl(timer, notifications::cycleLoopEvent)
+    private val analyzer: Analyzer = AnalyzerImpl(timer, notifications::cycleLoopEvent, reportType)
     private val validator: Validator = ValidatorImpl()
     private val staticContentReport: Report = StaticContentReport()
     private val sourcesReport: Report = SourcesReport()
@@ -166,12 +170,11 @@ class Dependencies(integrations: Integrations) {
     private val configFileEvent: (Path) -> Unit = notifications::configFileEvent
     private val errorReportEvent: (List<String>) -> Unit = notifications::errorReportEvent
     private val fullAppTimeTakenEvent: (Duration) -> Unit = notifications::fullAppTimeTakenEvent
-    private val errorHandler: ErrorHandler = ErrorHandlerImpl(files, configuredErrorsFile, maximumAllowedErrorCount, errorReportEvent)
+    private val errorHandler: ErrorHandler =
+        ErrorHandlerImpl(files, configuredErrorsFile, maximumAllowedErrorCount, errorReportEvent)
     private val summaryEvent: (Summary) -> Unit = notifications::summaryEvent
-    private val configHelp:ConfigHelp = ConfigHelpImpl(config, relationParserRepository)
     val errorMessageHolder: ErrorMessageHolder = ErrorMessageHolderImpl()
     val runner: Runnable = Runner(
-        configHelp,
         clock,
         observer,
         analyzer,
diff --git a/relationparser/src/main/kotlin/com/seanshubin/code/structure/relationparser/BytecodeFormat.kt b/relationparser/src/main/kotlin/com/seanshubin/code/structure/relationparser/BytecodeFormat.kt
new file mode 100644
index 0000000..f756ae9
--- /dev/null
+++ b/relationparser/src/main/kotlin/com/seanshubin/code/structure/relationparser/BytecodeFormat.kt
@@ -0,0 +1,6 @@
+package com.seanshubin.code.structure.relationparser
+
+enum class BytecodeFormat {
+    CLASS,
+    BEAM
+}
diff --git a/relationparser/src/main/kotlin/com/seanshubin/code/structure/relationparser/RelationParserRepository.kt b/relationparser/src/main/kotlin/com/seanshubin/code/structure/relationparser/RelationParserRepository.kt
index 3280725..d9e8f5d 100644
--- a/relationparser/src/main/kotlin/com/seanshubin/code/structure/relationparser/RelationParserRepository.kt
+++ b/relationparser/src/main/kotlin/com/seanshubin/code/structure/relationparser/RelationParserRepository.kt
@@ -1,6 +1,5 @@
 package com.seanshubin.code.structure.relationparser
 
 interface RelationParserRepository {
-    fun lookupByBytecodeFormat(bytecodeFormat: String): RelationParser
-    fun supportedBytecodeFormatNames(): List<String>
+    fun lookupByBytecodeFormat(bytecodeFormat: BytecodeFormat): RelationParser
 }
\ No newline at end of file
diff --git a/samples/sample-elixir-config.json b/samples/sample-elixir-config.json
index de225ae..68d7697 100644
--- a/samples/sample-elixir-config.json
+++ b/samples/sample-elixir-config.json
@@ -24,5 +24,6 @@
     "descendantDependsOnAncestor" : true
   },
   "useObservationsCache" : false,
-  "maximumAllowedErrorCount" : 19
+  "maximumAllowedErrorCount" : 19,
+  "reportType" : "choose one of: fast, detailed"
 }
\ No newline at end of file
diff --git a/samples/sample-kotlin-config.json b/samples/sample-kotlin-config.json
index f530004..e83e67d 100644
--- a/samples/sample-kotlin-config.json
+++ b/samples/sample-kotlin-config.json
@@ -25,10 +25,5 @@
   },
   "useObservationsCache" : false,
   "maximumAllowedErrorCount" : 19,
-  "help" : {
-    "bytecodeFormat" : [
-      "beam",
-      "class"
-    ]
-  }
+  "reportType" : "fast"
 }
\ No newline at end of file
